package oodms.admin;

import java.awt.Font;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import oodms.oop.AddNewCustomer;
import oodms.oop.CheckSimilarity;
import oodms.oop.Create3DArray;
import oodms.oop.DeleteSelected;
import oodms.oop.FlushAndWrite;
import oodms.oop.SaveSelected;
import oodms.oop.SearchFileData;

public class UserMgmtDisplay extends javax.swing.JFrame {

    /**
     * Creates new form UserMgmtDisplayPage
     */
    public UserMgmtDisplay() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        userMgmtPanel = new javax.swing.JPanel();
        userMgmtLabel = new javax.swing.JLabel();
        searchUserLabel = new javax.swing.JLabel();
        backgroundPanel1 = new javax.swing.JPanel();
        searchUserIDLabel = new javax.swing.JLabel();
        inputSearchUsername = new javax.swing.JTextField();
        searchUserBtn = new javax.swing.JButton();
        detailLabel = new javax.swing.JLabel();
        backgroundPanel2 = new javax.swing.JPanel();
        usernameLabel = new javax.swing.JLabel();
        emailLabel = new javax.swing.JLabel();
        contactLabel = new javax.swing.JLabel();
        addressLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        inputAddress = new javax.swing.JTextArea();
        inputUsername = new javax.swing.JTextField();
        inputEmail = new javax.swing.JTextField();
        inputContact = new javax.swing.JTextField();
        addBtn = new javax.swing.JButton();
        editBtn = new javax.swing.JButton();
        saveBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        ageLabel = new javax.swing.JLabel();
        genderLabel = new javax.swing.JLabel();
        inputAge = new javax.swing.JSpinner();
        inputGender = new javax.swing.JComboBox<>();
        passwordLabel = new javax.swing.JLabel();
        inputPassword = new javax.swing.JTextField();
        listUserLabel = new javax.swing.JLabel();
        backBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        displayUserTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("User Management");

        userMgmtPanel.setBackground(new java.awt.Color(250, 242, 224));

        userMgmtLabel.setFont(new java.awt.Font("Montserrat", 1, 24)); // NOI18N
        userMgmtLabel.setForeground(new java.awt.Color(76, 43, 24));
        userMgmtLabel.setText("User Management");

        searchUserLabel.setFont(new java.awt.Font("Montserrat", 1, 18)); // NOI18N
        searchUserLabel.setForeground(new java.awt.Color(76, 43, 24));
        searchUserLabel.setText("Search");

        backgroundPanel1.setBackground(new java.awt.Color(230, 207, 201));

        searchUserIDLabel.setFont(new java.awt.Font("Karla", 0, 14)); // NOI18N
        searchUserIDLabel.setForeground(new java.awt.Color(76, 43, 24));
        searchUserIDLabel.setText("Enter Name:");

        inputSearchUsername.setBackground(new java.awt.Color(184, 145, 104));
        inputSearchUsername.setFont(new java.awt.Font("Karla", 0, 14)); // NOI18N
        inputSearchUsername.setForeground(new java.awt.Color(76, 43, 24));

        searchUserBtn.setBackground(new java.awt.Color(184, 145, 104));
        searchUserBtn.setFont(new java.awt.Font("Montserrat", 1, 14)); // NOI18N
        searchUserBtn.setForeground(new java.awt.Color(76, 43, 24));
        searchUserBtn.setText("Search");
        searchUserBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchUserBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout backgroundPanel1Layout = new javax.swing.GroupLayout(backgroundPanel1);
        backgroundPanel1.setLayout(backgroundPanel1Layout);
        backgroundPanel1Layout.setHorizontalGroup(
            backgroundPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(searchUserIDLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(inputSearchUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(searchUserBtn)
                .addGap(16, 16, 16))
        );
        backgroundPanel1Layout.setVerticalGroup(
            backgroundPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(backgroundPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchUserIDLabel)
                    .addComponent(inputSearchUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchUserBtn))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        detailLabel.setFont(new java.awt.Font("Montserrat", 1, 18)); // NOI18N
        detailLabel.setForeground(new java.awt.Color(76, 43, 24));
        detailLabel.setText("Details");

        backgroundPanel2.setBackground(new java.awt.Color(230, 207, 201));

        usernameLabel.setFont(new java.awt.Font("Karla", 0, 14)); // NOI18N
        usernameLabel.setForeground(new java.awt.Color(76, 43, 24));
        usernameLabel.setText("Username:");

        emailLabel.setFont(new java.awt.Font("Karla", 0, 14)); // NOI18N
        emailLabel.setForeground(new java.awt.Color(76, 43, 24));
        emailLabel.setText("Email Address:");

        contactLabel.setFont(new java.awt.Font("Karla", 0, 14)); // NOI18N
        contactLabel.setForeground(new java.awt.Color(76, 43, 24));
        contactLabel.setText("Contact Number:");

        addressLabel.setFont(new java.awt.Font("Karla", 0, 14)); // NOI18N
        addressLabel.setForeground(new java.awt.Color(76, 43, 24));
        addressLabel.setText("Address:");

        inputAddress.setEditable(false);
        inputAddress.setBackground(new java.awt.Color(184, 145, 104));
        inputAddress.setColumns(20);
        inputAddress.setFont(new java.awt.Font("Karla", 0, 14)); // NOI18N
        inputAddress.setForeground(new java.awt.Color(76, 43, 24));
        inputAddress.setLineWrap(true);
        inputAddress.setRows(5);
        jScrollPane1.setViewportView(inputAddress);

        inputUsername.setEditable(false);
        inputUsername.setBackground(new java.awt.Color(184, 145, 104));
        inputUsername.setFont(new java.awt.Font("Karla", 0, 14)); // NOI18N
        inputUsername.setForeground(new java.awt.Color(76, 43, 24));

        inputEmail.setEditable(false);
        inputEmail.setBackground(new java.awt.Color(184, 145, 104));
        inputEmail.setFont(new java.awt.Font("Karla", 0, 14)); // NOI18N
        inputEmail.setForeground(new java.awt.Color(76, 43, 24));
        inputEmail.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                inputEmailFocusLost(evt);
            }
        });

        inputContact.setEditable(false);
        inputContact.setBackground(new java.awt.Color(184, 145, 104));
        inputContact.setFont(new java.awt.Font("Karla", 0, 14)); // NOI18N
        inputContact.setForeground(new java.awt.Color(76, 43, 24));
        inputContact.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                inputContactFocusLost(evt);
            }
        });

        addBtn.setBackground(new java.awt.Color(184, 145, 104));
        addBtn.setFont(new java.awt.Font("Montserrat", 1, 14)); // NOI18N
        addBtn.setForeground(new java.awt.Color(76, 43, 24));
        addBtn.setText("Add");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        editBtn.setBackground(new java.awt.Color(184, 145, 104));
        editBtn.setFont(new java.awt.Font("Montserrat", 1, 14)); // NOI18N
        editBtn.setForeground(new java.awt.Color(76, 43, 24));
        editBtn.setText("Edit");
        editBtn.setEnabled(false);
        editBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBtnActionPerformed(evt);
            }
        });

        saveBtn.setBackground(new java.awt.Color(184, 145, 104));
        saveBtn.setFont(new java.awt.Font("Montserrat", 1, 14)); // NOI18N
        saveBtn.setForeground(new java.awt.Color(76, 43, 24));
        saveBtn.setText("Save");
        saveBtn.setEnabled(false);
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });

        deleteBtn.setBackground(new java.awt.Color(184, 145, 104));
        deleteBtn.setFont(new java.awt.Font("Montserrat", 1, 14)); // NOI18N
        deleteBtn.setForeground(new java.awt.Color(76, 43, 24));
        deleteBtn.setText("Delete");
        deleteBtn.setEnabled(false);
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        ageLabel.setFont(new java.awt.Font("Karla", 0, 14)); // NOI18N
        ageLabel.setForeground(new java.awt.Color(76, 43, 24));
        ageLabel.setText("Age:");

        genderLabel.setFont(new java.awt.Font("Karla", 0, 14)); // NOI18N
        genderLabel.setForeground(new java.awt.Color(76, 43, 24));
        genderLabel.setText("Gender:");

        inputAge.setFont(new java.awt.Font("Karla", 0, 14)); // NOI18N
        inputAge.setModel(new javax.swing.SpinnerNumberModel());
        inputAge.setEnabled(false);

        inputGender.setBackground(new java.awt.Color(184, 145, 104));
        inputGender.setForeground(new java.awt.Color(76, 43, 24));
        inputGender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Male", "Female", "Others" }));
        inputGender.setEnabled(false);

        passwordLabel.setFont(new java.awt.Font("Karla", 0, 14)); // NOI18N
        passwordLabel.setForeground(new java.awt.Color(76, 43, 24));
        passwordLabel.setText("Password:");

        inputPassword.setEditable(false);
        inputPassword.setBackground(new java.awt.Color(184, 145, 104));
        inputPassword.setFont(new java.awt.Font("Karla", 0, 14)); // NOI18N
        inputPassword.setForeground(new java.awt.Color(76, 43, 24));

        javax.swing.GroupLayout backgroundPanel2Layout = new javax.swing.GroupLayout(backgroundPanel2);
        backgroundPanel2.setLayout(backgroundPanel2Layout);
        backgroundPanel2Layout.setHorizontalGroup(
            backgroundPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundPanel2Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(backgroundPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(backgroundPanel2Layout.createSequentialGroup()
                        .addComponent(addBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(editBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(saveBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(deleteBtn))
                    .addGroup(backgroundPanel2Layout.createSequentialGroup()
                        .addGroup(backgroundPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(contactLabel)
                            .addComponent(emailLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(usernameLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(addressLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(ageLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(genderLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(passwordLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(backgroundPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(inputUsername)
                            .addComponent(inputEmail, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE)
                            .addComponent(inputContact)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(inputGender, 0, 208, Short.MAX_VALUE)
                            .addComponent(inputAge)
                            .addComponent(inputPassword))))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        backgroundPanel2Layout.setVerticalGroup(
            backgroundPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundPanel2Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(backgroundPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameLabel)
                    .addComponent(inputUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(backgroundPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordLabel)
                    .addComponent(inputPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(backgroundPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(emailLabel)
                    .addComponent(inputEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(backgroundPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(contactLabel)
                    .addComponent(inputContact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(backgroundPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addressLabel)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(backgroundPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ageLabel)
                    .addComponent(inputAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(backgroundPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(genderLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(backgroundPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addBtn)
                    .addComponent(editBtn)
                    .addComponent(saveBtn)
                    .addComponent(deleteBtn))
                .addGap(14, 14, 14))
        );

        listUserLabel.setFont(new java.awt.Font("Montserrat", 1, 18)); // NOI18N
        listUserLabel.setForeground(new java.awt.Color(76, 43, 24));
        listUserLabel.setText("List");

        backBtn.setBackground(new java.awt.Color(184, 145, 104));
        backBtn.setFont(new java.awt.Font("Montserrat", 1, 14)); // NOI18N
        backBtn.setForeground(new java.awt.Color(76, 43, 24));
        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        displayUserTable.setBackground(new java.awt.Color(230, 207, 201));
        displayUserTable.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        displayUserTable.setFont(new java.awt.Font("Karla", 0, 14)); // NOI18N
        displayUserTable.setForeground(new java.awt.Color(76, 43, 24));
        displayUserTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Username", "Email Address", "Contact Number", "Address", "Age", "Gender"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        displayUserTable.setGridColor(new java.awt.Color(230, 207, 201));
        displayUserTable.setSelectionBackground(new java.awt.Color(184, 145, 104));
        displayUserTable.setSelectionForeground(new java.awt.Color(76, 43, 24));
        displayUserTable.setShowVerticalLines(true);
        displayUserTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                displayUserTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(displayUserTable);
        // Change Table Header Font
        displayUserTable.getTableHeader().setFont(new Font("Karla", Font.PLAIN, 14));

        // Change Table Column Width
        TableColumnModel columnModel = displayUserTable.getColumnModel();

        columnModel.getColumn(0).setPreferredWidth(125);
        columnModel.getColumn(1).setPreferredWidth(150);
        columnModel.getColumn(2).setPreferredWidth(175);
        columnModel.getColumn(3).setPreferredWidth(250);

        javax.swing.GroupLayout userMgmtPanelLayout = new javax.swing.GroupLayout(userMgmtPanel);
        userMgmtPanel.setLayout(userMgmtPanelLayout);
        userMgmtPanelLayout.setHorizontalGroup(
            userMgmtPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(userMgmtPanelLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(userMgmtPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(userMgmtPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(detailLabel)
                        .addComponent(searchUserLabel)
                        .addComponent(userMgmtLabel)
                        .addComponent(backgroundPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(backgroundPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(backBtn))
                .addGap(39, 39, 39)
                .addGroup(userMgmtPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(listUserLabel)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 640, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(37, Short.MAX_VALUE))
        );
        userMgmtPanelLayout.setVerticalGroup(
            userMgmtPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(userMgmtPanelLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(userMgmtLabel)
                .addGap(18, 18, 18)
                .addGroup(userMgmtPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchUserLabel)
                    .addComponent(listUserLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(userMgmtPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(userMgmtPanelLayout.createSequentialGroup()
                        .addComponent(backgroundPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(detailLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(backgroundPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18))
                    .addGroup(userMgmtPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 511, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)))
                .addComponent(backBtn)
                .addGap(27, 27, 27))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(userMgmtPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(userMgmtPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        // Unselect Row
        displayUserTable.clearSelection();
        
        // Disable button
        editBtn.setEnabled(false);
        saveBtn.setEnabled(false);
        deleteBtn.setEnabled(false);

        // Set input from user
        String getUsername = inputUsername.getText();

        String getPassword = inputPassword.getText();

        String getEmail = inputEmail.getText();

        String getContact = inputContact.getText();

        String getAddress = inputAddress.getText();

        String getAge = inputAge.getValue().toString();

        String getGender = inputGender.getSelectedItem().toString();

        // Assume password and confirm password are the same
        // Check for username and email uniqueness
        CheckSimilarity checkNewUser = new CheckSimilarity();
        boolean credentialsAdminChecker = checkNewUser.credentialsAdminChecker(getUsername, getEmail, getUsername, getEmail);
        
        // Enable the fields first
        if(inputPassword.isEditable()) {
            // Check for empty text field
            if((!getUsername.equals("")) && (!getPassword.equals("")) && (!getEmail.equals("")) && (!getContact.equals("")) && (!getAddress.equals(""))) {
                if((!(Integer.parseInt(getAge) > 100)) && (!(Integer.parseInt(getAge) < 0))) {
                    if(!credentialsAdminChecker) {
                        System.out.println("Added new user");

                        // Create a popup dialog message box
                        JOptionPane.showMessageDialog(null, "New account has been created", "Account Created", JOptionPane.INFORMATION_MESSAGE);

                        AddNewCustomer customer = new AddNewCustomer(getUsername, getPassword, getEmail, getContact, getAddress, getAge, getGender);

                        // Reset Search and Details fields
                        inputUsername.setText("");
                        inputPassword.setText("");
                        inputEmail.setText("");
                        inputContact.setText("");
                        inputAddress.setText("");
                        inputAge.setValue(0);
                        inputGender.setSelectedItem("Male");

                        // Disable editing
                        inputUsername.setEditable(false);
                        inputPassword.setEditable(false);
                        inputEmail.setEditable(false);
                        inputContact.setEditable(false);
                        inputAddress.setEditable(false);
                        inputAge.setEnabled(false);
                        inputGender.setEnabled(false);

                        // Disable buttons
                        editBtn.setEnabled(false);
                        saveBtn.setEnabled(false);
                        deleteBtn.setEnabled(false);
                    } else {
                        // Create a popup dialog message box
                        JOptionPane.showMessageDialog(null, "Account existed.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Please enter a valid age from range of 0 to 100.", "Invalid age.", JOptionPane.ERROR_MESSAGE);
                    
                    inputAge.setValue(0);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Some fields are empty or no values.", "Error creating new account", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            // Clear all values of text field and make it editable
            inputUsername.setText("");
            inputPassword.setText("");
            inputEmail.setText("");
            inputContact.setText("");
            inputAddress.setText("");
            inputAge.setValue(0);
            inputGender.setSelectedItem("Male");
                    
            inputUsername.setEditable(true);
            inputPassword.setEditable(true);
            inputEmail.setEditable(true);
            inputContact.setEditable(true);
            inputAddress.setEditable(true);
            inputAge.setEnabled(true);
            inputGender.setEnabled(true);
        }
    }//GEN-LAST:event_addBtnActionPerformed

    private void editBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBtnActionPerformed
        // Enable editing
        inputUsername.setEditable(true);
        inputPassword.setText("");
        inputPassword.setEditable(false);
        inputEmail.setEditable(true);
        inputContact.setEditable(true);
        inputAddress.setEditable(true);
        inputAge.setEnabled(true);
        inputGender.setEnabled(true);
        
        // Enable button
        saveBtn.setEnabled(true);
    }//GEN-LAST:event_editBtnActionPerformed

    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
        // Get old username and old email from table to compare with existing username in text file
        String getOldUsername = displayUserTable.getValueAt(displayUserTable.getSelectedRow(), 0).toString();
        String getOldEmail = displayUserTable.getValueAt(displayUserTable.getSelectedRow(), 1).toString();
        
        // Confirm Message
        String confirmMessage = "Save changes of user " + getOldUsername + " ?";
        int result = JOptionPane.showConfirmDialog(null, confirmMessage, "Confirm Save?", JOptionPane.YES_NO_OPTION);

        switch (result) {
            // Save Changes
            case JOptionPane.YES_OPTION -> {
                // Get Text Field value
                String getUsername = inputUsername.getText();
                String getEmail = inputEmail.getText();
                String getContact = inputContact.getText();
                String getAddress = inputAddress.getText();
                String getAge = inputAge.getValue().toString();
                String getGender = inputGender.getSelectedItem().toString();

                // Write into an array
                String[] newChangesArr = new String[] {getUsername, getEmail, getContact, getAddress, getAge, getGender};

                // Check for username and email uniqueness
                boolean credentialsAdminChecker = new CheckSimilarity().credentialsAdminChecker(getUsername, getEmail, getOldUsername, getOldEmail);
                
                if((!getUsername.equals("")) && (!getEmail.equals("")) && (!getContact.equals("")) && (!getAddress.equals(""))) {
                    if(!credentialsAdminChecker) {
                        // Save changes into text file
                        SaveSelected ss = new SaveSelected();
                        String[][] newChangesArrToSave = ss.saveUsername(newChangesArr, getOldUsername);

                        // Confirm save changes
                        new FlushAndWrite().flushAndWrite(newChangesArrToSave, "src/oodms/database/credentials.txt");
                        
                        /**
                         * If is changing a customer username
                         */
                        if((!getOldUsername.toLowerCase().startsWith("admin")) && (!getOldUsername.toLowerCase().startsWith("delivery"))) {
                            String[][] getCartArr = new Create3DArray().create3D("/oodms/database/cart.txt");
                            String[][] getDeliveryArr = new Create3DArray().create3D("/oodms/database/delivery.txt");
                            String[][] getFeedbackArr = new Create3DArray().create3D("/oodms/database/feedback.txt");
                            String[][] getOrderArr = new Create3DArray().create3D("/oodms/database/order.txt");
                            String[][] getPaymentArr = new Create3DArray().create3D("/oodms/database/payment.txt");
                            
                            // Change in cart text file
                            for(String[] getCart : getCartArr) {
                                if(getCart[1].toLowerCase().equalsIgnoreCase(getOldUsername)) {
                                    getCart[1] = getUsername;
                                }
                            }
                            
                            // Change in delivery text file
                            for(String[] getDelivery : getDeliveryArr) {
                                if(getDelivery[3].toLowerCase().equalsIgnoreCase(getOldUsername)) {
                                    getDelivery[3] = getUsername;
                                    getDelivery[4] = getAddress;
                                }
                            }
                            
                            // Change in feedback text file
                            for(String[] getFeedback : getFeedbackArr) {
                                if(getFeedback[1].toLowerCase().equalsIgnoreCase(getOldUsername)) {
                                    getFeedback[1] = getUsername;
                                }
                            }
                            
                            // Change in order text file
                            for(String[] getOrder : getOrderArr) {
                                if(getOrder[1].toLowerCase().equalsIgnoreCase(getOldUsername)) {
                                    getOrder[1] = getUsername;
                                }
                            }
                            
                            // Change in payment text file
                            for(String[] getPayment : getPaymentArr) {
                                if(getPayment[2].toLowerCase().equalsIgnoreCase(getOldUsername)) {
                                    getPayment[2] = getUsername;
                                }
                            }
                            
                            String notifyMessage = "All information related to " + getOldUsername + " has been changed to " + getUsername + ".";
                            JOptionPane.showMessageDialog(null, notifyMessage, "Information Updated", JOptionPane.INFORMATION_MESSAGE);
                        }

                        // Reset Search and Details fields
                        inputSearchUsername.setText("");

                        inputUsername.setText("");
                        inputPassword.setText("");
                        inputEmail.setText("");
                        inputContact.setText("");
                        inputAddress.setText("");
                        inputAge.setValue(0);
                        inputGender.setSelectedItem("Male");

                        // Disable editing
                        inputUsername.setEditable(false);
                        inputPassword.setEditable(false);
                        inputEmail.setEditable(false);
                        inputContact.setEditable(false);
                        inputAddress.setEditable(false);
                        inputAge.setEnabled(false);
                        inputGender.setEnabled(false);

                        // Disable buttons
                        editBtn.setEnabled(false);
                        saveBtn.setEnabled(false);
                        deleteBtn.setEnabled(false);

                        // Clear table
                        DefaultTableModel model = (DefaultTableModel) displayUserTable.getModel();
                        model.setRowCount(0);

                        // Information message
                        JOptionPane.showMessageDialog(null, "Changes has been saved.", "Save Successful", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(null, "Username or email existed. Please change username or email.", "Username or Email Existed", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Some fields are empty or no values.", "Error saving account", JOptionPane.ERROR_MESSAGE);
                }
            }
            // Do nothing
            case JOptionPane.NO_OPTION -> System.out.println("Do nothing");
            
            // Default
            default -> System.out.println("Closed and do nothing");
        }
    }//GEN-LAST:event_saveBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        // Confirm Message
        String confirmMessage = "Are you sure to delete user " + inputUsername.getText() + "?";
        int result = JOptionPane.showConfirmDialog(null, confirmMessage, "Confirm Delete?", JOptionPane.YES_NO_OPTION);
        
        // Information Message
        String infoMessage = "User " + inputUsername.getText() + " has been successfully deleted.";
        
        switch (result) {
            // Delete the selected user
            case JOptionPane.YES_OPTION -> {
                // Check whether there is one admin left
                String[][] checkSoleAdmin = new Create3DArray().create3D("/oodms/database/credentials.txt");
                
                int adminCount = 0;
                
                for(String[] checkSole : checkSoleAdmin) {
                    if(checkSole[0].toLowerCase().startsWith("admin")) {
                        adminCount++;
                    }
                    
                    if(checkSole[0].toLowerCase().startsWith("delivery")) {
                        adminCount++;
                    }
                }
                
                System.out.println(adminCount);
                
                if(adminCount > 2) {
                    // Get the selected row
                    int selectedRowIndex = displayUserTable.getSelectedRow();

                    // Get the username of selected row
                    String selectedRowUsername = (String) displayUserTable.getValueAt(selectedRowIndex, 0);

                    // Return a multidimensional of excluded selected row
                    String[][] ds = new DeleteSelected().deleteSelected(selectedRowUsername, "/oodms/database/credentials.txt");

                    // Flush and Write
                    FlushAndWrite faw = new FlushAndWrite();
                    faw.flushAndWrite(ds, "src/oodms/database/credentials.txt");

                    // Reset Search and Details fields
                    inputSearchUsername.setText("");

                    inputUsername.setText("");
                    inputPassword.setText("");
                    inputEmail.setText("");
                    inputContact.setText("");
                    inputAddress.setText("");
                    inputAge.setValue(0);
                    inputGender.setSelectedItem("Male");

                    // Disable editing
                    inputUsername.setEditable(false);
                    inputPassword.setEditable(false);
                    inputEmail.setEditable(false);
                    inputContact.setEditable(false);
                    inputAddress.setEditable(false);
                    inputAge.setEnabled(false);
                    inputGender.setEnabled(false);

                    // Disable buttons
                    editBtn.setEnabled(false);
                    saveBtn.setEnabled(false);
                    deleteBtn.setEnabled(false);

                    // Clear table
                    DefaultTableModel userTable = (DefaultTableModel) displayUserTable.getModel();
                    userTable.setRowCount(0);

                    // Information Message
                    JOptionPane.showMessageDialog(null, infoMessage, "Delete Success", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, "There is only one admin account and one delivery account left.\nYou can't delete the last admin account or delivery account.", "At least one admin and one delivery account required.", JOptionPane.ERROR_MESSAGE);
                }
            }
            
            // Do Nothing
            case JOptionPane.NO_OPTION -> System.out.println("Do nothing");
            
            // Default
            default -> System.out.println("Closed and do nothing");
        }
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        new AdminDashboard().setVisible(true);
        dispose();
    }//GEN-LAST:event_backBtnActionPerformed

    private void searchUserBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchUserBtnActionPerformed
        // Disable button
        editBtn.setEnabled(false);
        saveBtn.setEnabled(false);
        deleteBtn.setEnabled(false);
        
        // Disable editing
        inputUsername.setEditable(false);
        inputPassword.setEditable(false);
        inputEmail.setEditable(false);
        inputContact.setEditable(false);
        inputAddress.setEditable(false);
        inputAge.setEnabled(false);
        inputGender.setEnabled(false);
        
        // Reset Search and Details fields
        inputUsername.setText("");
        inputPassword.setText("");
        inputEmail.setText("");
        inputContact.setText("");
        inputAddress.setText("");
        inputAge.setValue(0);
        inputGender.setSelectedItem("Male");

        // Clear table
        DefaultTableModel userTable = (DefaultTableModel) displayUserTable.getModel();
        userTable.setRowCount(0);
        
        // Loop all data except password to the table
        // Get Search Input
        String getKeyword = inputSearchUsername.getText()
                ;
        if(getKeyword.isBlank()) {
            // OOP Method - Get User Data into Multidimensional Array
            String[][] allUserArr = new Create3DArray().create3D("/oodms/database/credentials.txt");
            
            // Loop all data
            for (String[] userArr : allUserArr) {
                String[] userDataArr = new String[] {userArr[0], userArr[2], userArr[3], userArr[4], userArr[5], userArr[6]};
                userTable.addRow(userDataArr);
            }
        } else {
            // OOP Method - Get Searched User Data into Multidimensional Array
            String[][] searchedAllUserArr = new SearchFileData().searchData(getKeyword, 0, "/oodms/database/credentials.txt");
            
            // Loop all data
            for (String[] searchedUserArr : searchedAllUserArr) {
                String[] searchedUserDataArr = new String[] {searchedUserArr[0], searchedUserArr[2], searchedUserArr[3], searchedUserArr[4], searchedUserArr[5], searchedUserArr[6]};
                userTable.addRow(searchedUserDataArr);
            }
        }
    }//GEN-LAST:event_searchUserBtnActionPerformed

    private void displayUserTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_displayUserTableMouseClicked
        // Enable button
        editBtn.setEnabled(true);
        deleteBtn.setEnabled(true);
        
        // Disbale button
        saveBtn.setEnabled(false);

        // Disable editing
        inputUsername.setEditable(false);
        inputPassword.setEditable(false);
        inputEmail.setEditable(false);
        inputContact.setEditable(false);
        inputAddress.setEditable(false); 
        inputAge.setEnabled(false);
        inputGender.setEnabled(false);

        // Get the selected row number
        int selectedRow = displayUserTable.getSelectedRow();
        
        // Setting the JTextField and JTextArea
        inputUsername.setText((String) displayUserTable.getValueAt(selectedRow, 0));
        inputEmail.setText((String) displayUserTable.getValueAt(selectedRow, 1));
        inputContact.setText((String) displayUserTable.getValueAt(selectedRow, 2));
        inputAddress.setText((String) displayUserTable.getValueAt(selectedRow, 3));
        
        int getInputAge = Integer.parseInt((String) displayUserTable.getValueAt(selectedRow, 4));
        inputAge.setValue(getInputAge);
        
        inputGender.setSelectedItem(displayUserTable.getValueAt(selectedRow, 5));
    }//GEN-LAST:event_displayUserTableMouseClicked

    private void inputEmailFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_inputEmailFocusLost
        if((!inputEmail.getText().contains("@")) || (!inputEmail.getText().contains("."))) {
            JOptionPane.showMessageDialog(null, "Please input a valid email address.", "Invalid email address", JOptionPane.ERROR_MESSAGE);
            
            inputEmail.setText("");
        }
    }//GEN-LAST:event_inputEmailFocusLost

    private void inputContactFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_inputContactFocusLost
        // Define a regular expression pattern for the contact number format
        String contactNumberPattern = "\\d{10}|\\d{11}";
        Pattern pattern = Pattern.compile(contactNumberPattern);

        String contactNumber = inputContact.getText();

         // Use the regular expression to match the contact number
        Matcher matcher = pattern.matcher(contactNumber);
        
        if (!matcher.matches()) {
            JOptionPane.showMessageDialog(null, "Please enter the correct contact number format. Examples:\n012xxx1234\nor\n011xxxx1234", "Invalid contact number", JOptionPane.ERROR_MESSAGE);
        
            inputContact.setText("");
        }
    }//GEN-LAST:event_inputContactFocusLost

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserMgmtDisplay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserMgmtDisplay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserMgmtDisplay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserMgmtDisplay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UserMgmtDisplay().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JLabel addressLabel;
    private javax.swing.JLabel ageLabel;
    private javax.swing.JButton backBtn;
    private javax.swing.JPanel backgroundPanel1;
    private javax.swing.JPanel backgroundPanel2;
    private javax.swing.JLabel contactLabel;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JLabel detailLabel;
    private javax.swing.JTable displayUserTable;
    private javax.swing.JButton editBtn;
    private javax.swing.JLabel emailLabel;
    private javax.swing.JLabel genderLabel;
    private javax.swing.JTextArea inputAddress;
    private javax.swing.JSpinner inputAge;
    private javax.swing.JTextField inputContact;
    private javax.swing.JTextField inputEmail;
    private javax.swing.JComboBox<String> inputGender;
    private javax.swing.JTextField inputPassword;
    private javax.swing.JTextField inputSearchUsername;
    private javax.swing.JTextField inputUsername;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel listUserLabel;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JButton saveBtn;
    private javax.swing.JButton searchUserBtn;
    private javax.swing.JLabel searchUserIDLabel;
    private javax.swing.JLabel searchUserLabel;
    private javax.swing.JLabel userMgmtLabel;
    private javax.swing.JPanel userMgmtPanel;
    private javax.swing.JLabel usernameLabel;
    // End of variables declaration//GEN-END:variables
}
